name: Build Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      started_at: ${{ steps.start_time.outputs.time }}
      ended_at: ${{ steps.end_time.outputs.time }}
      duration: ${{ steps.duration.outputs.time }}
      result: ${{ job.status }}
    permissions:
      checks: write
      pull-requests: write
      contents: write
    steps:
      - name: Record start time
        id: start_time
        run: |
          echo "time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Jest Coverage Report
        id: coverage
        uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          output: report-markdown

      - name: Add coverage comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: ${{ steps.coverage.outputs.report }}

      - name: Record end time
        id: end_time
        run: |
          echo "time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Calculate duration
        id: duration
        run: |
          start_time=${{ steps.start_time.outputs.timestamp }}
          end_time=${{ steps.end_time.outputs.timestamp }}
          duration=$((end_time - start_time))

          # Format duration as mm:ss
          minutes=$((duration / 60))
          seconds=$((duration % 60))
          formatted_time=$(printf "%02d:%02d" $minutes $seconds)

          echo "seconds=$duration" >> $GITHUB_OUTPUT
          echo "time=$formatted_time" >> $GITHUB_OUTPUT

  send-pull-request-result-to-slack:
    permissions:
      contents: read
      actions: read
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - name: Set job status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "color=good" >> $GITHUB_OUTPUT
            echo "status_text=Success ✅" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "status_text=Failed ❌" >> $GITHUB_OUTPUT
          else
            echo "color=warning" >> $GITHUB_OUTPUT
            echo "status_text=Unknown ⚠️" >> $GITHUB_OUTPUT
          fi

      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
          custom_payload: |
            {
              text: "Pull request is ready to review on `${{ github.repository }}`",
              attachments: [{
                color: "${{ steps.status.outputs.color }}",
                title: "Build Results",
                fields: [
                  {
                    title: "Repository",
                    value: "<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>",
                    short: true
                  },
                  {
                    title: "Message",
                    value: github.event_name === "pull_request"
                        ? "<${{ github.event.pull_request.html_url }}|PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}>"
                        : (process.env.AS_MESSAGE ? process.env.AS_MESSAGE.split('\n')[0] : "No message"),
                    short: true
                  },
                  {
                    title: "Commit",
                    value: "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|" + "${{ github.sha }}".substring(0, 7) + ">",
                    short: true
                  },
                  {
                    title: "Author",
                    value: "${{ github.actor }}",
                    short: true
                  },
                  {
                    title: "Duration",
                    value: "${{ needs.test.outputs.duration }}",
                    short: true
                  },
                  {
                    title: "Status",
                    value: "${{ steps.status.outputs.status_text }}",
                    short: true
                  },
                  {
                    title: "Branch/Ref",
                    value: "${{ github.ref }}",
                    short: true
                  },
                  {
                    title: "Workflow",
                    value: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
                    short: true
                  }
                ],
                footer: "GitHub Actions · ${{ github.workflow }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
